/* ------------------------------------------------------- */
/*                            SW                           */
/* ------------------------------------------------------- */
    self.addEventListener('push', e => {
        console.log('push!!', e)
        let datos = e.data.text()
        console.log(datos)

        //https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerRegistration/showNotification
        const title = 'Super Lista!'
        const options = {
            body: `Mensajes: ${datos}`,
            icon: 'images/icons/icon-72x72.png',
            badge: 'https://licores.ninja/wp-content/uploads/2018/04/cropped-ninja-n-02.png'
        }

        e.waitUntil(self.registration.showNotification(title, options))
    })

    self.addEventListener('notificationclick', e => {
        console.log('click en notificaci칩n recibido!', e)

        e.notification.close()
        e.waitUntil(clients.openWindow('https://www.instagram.com'))
    })


/* ------------------------------------------------------- */
/*                       estilos.css                       */
/* ------------------------------------------------------- */
    pre {
        white-space: pre-wrap;
        background-color: #EEEEEE;
        padding: 16px;
    }
    
    pre code {
        word-break: break-word;
    }

    .is-invisible {
    opacity: 0;
    }

/* ------------------------------------------------------- */
/*                       index.html                        */
/* ------------------------------------------------------- */
    <!-- ---------------------------------- -->
    <!--        LISTA DE PRODUCTOS          -->
    <!-- ---------------------------------- -->
    <div id="lista"></div>


    <!-- ---------------------------------------- -->
    <!--                   Push                   -->
    <!-- ---------------------------------------- -->
    <section>
        <p>
            <button disabled
                class="js-push-btn mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect">
                Habilitar Notificaciones Push
            </button>
        </p>
        <div class="subscription-details js-subscription-details is-invisible">
            <pre><code class="js-subscription-json"></code></pre>
        </div>

    </section>


/* ------------------------------------------------------- */
/*                        main.js                          */
/* ------------------------------------------------------- */
    function registrarServiceWorker() {
        if('serviceWorker' in navigator) {
            window.addEventListener('load', function() {
                this.navigator.serviceWorker.register('./sw.js')
                .then(function(reg) {
                    //console.log('el service worker se registr칩 correctamente', reg)

                    initialiseUI(reg)
                    
                    //Habilitamos el funcionamiento de las notificaciones
                    Notification.requestPermission(function(res) {
                        if(res == 'granted') {
                            navigator.serviceWorker.ready.then(function(reg) {
                                console.log(reg)
                            })
                        }
                    })                

                    reg.onupdatefound = () => {
                        const installingWorker = reg.installing
                        installingWorker.onstatechange = () => {
                            console.log('SW ------>', installingWorker.state)
                            if(installingWorker.state === 'activated' && this.navigator.serviceWorker.controller) {
                                console.log('REINICIANDO...')

                                //reseteo la p치gina a los 2 segundos
                                setTimeout(() => {
                                    console.log('OK!')
                                    location.reload()
                                },2000)
                            }
                        }
                    }
                })
                .catch(function(err) {
                    console.error('Error al registrar el service worker', err)
                })
            })
        }
        else {
            console.error('serviceWorker no est치 disponible en navigator')
        }
    }

/* ------------------------------------------------------- */
/*                        push.js                          */
/* ------------------------------------------------------- */
    const applicationServerPublicKey = 'BN0cjaW6di6rcemJvO0jnPv28yMQSui3m39CQUkvALukIrLUMsdIJ3JWqJphscBaysJDx4BCfjE8SU8wQxTYb7g'

    let pushButton = null;
    let isSubscribed = false;
    let swRegistration = null;

    function urlB64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/');

        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);

        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        //console.log(outputArray)
        return outputArray;
    }


    function updateBtn() {
        if (isSubscribed) {
            pushButton.textContent = 'DesHabilitar Notificaciones Push';
        } else {
            pushButton.textContent = 'Habilitar Notificaciones Push';
        }

        pushButton.disabled = false;
    }

    function updateSubscriptionOnServer(subscription) {
        // TODO: Send subscription to application server

        const subscriptionJson = document.querySelector('.js-subscription-json');
        const subscriptionDetails =
            document.querySelector('.js-subscription-details');

        if (subscription) {
            subscriptionJson.textContent = JSON.stringify(subscription);
            subscriptionDetails.classList.remove('is-invisible');
        } else {
            subscriptionDetails.classList.add('is-invisible');
        }
    }


    function subscribeUser() {
        const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);
        swRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: applicationServerKey
        })
            .then(function (subscription) {
                console.log('User is subscribed:', subscription);

                updateSubscriptionOnServer(subscription);

                isSubscribed = true;

                updateBtn();
            })
            .catch(function (err) {
                console.log('Failed to subscribe the user: ', err);
                updateBtn();
            });
    }


    function unsubscribeUser() {
        swRegistration.pushManager.getSubscription()
            .then(function (subscription) {
                if (subscription) {
                    return subscription.unsubscribe();
                }
            })
            .catch(function (error) {
                console.log('Error unsubscribing', error);
            })
            .then(function () {
                updateSubscriptionOnServer(null);

                console.log('User is unsubscribed.');
                isSubscribed = false;

                updateBtn();
            });
    }


    function initialiseUI(reg) {

        swRegistration = reg
        pushButton = document.querySelector('.js-push-btn');

        pushButton.addEventListener('click', function () {
            pushButton.disabled = true;
            if (isSubscribed) {
                unsubscribeUser();
            } else {
                subscribeUser();
            }
        });

        // Set the initial subscription value
        swRegistration.pushManager.getSubscription()
            .then(function (subscription) {
                isSubscribed = !(subscription === null);

                if (isSubscribed) {
                    console.log('User IS subscribed.');
                } else {
                    console.log('User is NOT subscribed.');
                }

                updateBtn();
            });
    }
